package proto

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TXContract_ContractType int32

const (
	TXContract_TransferContractType                TXContract_ContractType = 0
	TXContract_CreateAssetContractType             TXContract_ContractType = 1
	TXContract_CreateValidatorContractType         TXContract_ContractType = 2
	TXContract_ValidatorConfigContractType         TXContract_ContractType = 3
	TXContract_FreezeContractType                  TXContract_ContractType = 4
	TXContract_UnfreezeContractType                TXContract_ContractType = 5
	TXContract_DelegateContractType                TXContract_ContractType = 6
	TXContract_UndelegateContractType              TXContract_ContractType = 7
	TXContract_WithdrawContractType                TXContract_ContractType = 8
	TXContract_ClaimContractType                   TXContract_ContractType = 9
	TXContract_UnjailContractType                  TXContract_ContractType = 10
	TXContract_AssetTriggerContractType            TXContract_ContractType = 11
	TXContract_SetAccountNameContractType          TXContract_ContractType = 12
	TXContract_ProposalContractType                TXContract_ContractType = 13
	TXContract_VoteContractType                    TXContract_ContractType = 14
	TXContract_ConfigITOContractType               TXContract_ContractType = 15
	TXContract_SetITOPricesContractType            TXContract_ContractType = 16
	TXContract_BuyContractType                     TXContract_ContractType = 17
	TXContract_SellContractType                    TXContract_ContractType = 18
	TXContract_CancelMarketOrderContractType       TXContract_ContractType = 19
	TXContract_CreateMarketplaceContractType       TXContract_ContractType = 20
	TXContract_ConfigMarketplaceContractType       TXContract_ContractType = 21
	TXContract_UpdateAccountPermissionContractType TXContract_ContractType = 22
	TXContract_DepositContractType                 TXContract_ContractType = 23
	TXContract_ITOTriggerContractType              TXContract_ContractType = 24
	TXContract_SmartContractType                   TXContract_ContractType = 63
)

// Enum value maps for TXContract_ContractType.
var (
	TXContract_ContractType_name = map[int32]string{
		0:  "TransferContractType",
		1:  "CreateAssetContractType",
		2:  "CreateValidatorContractType",
		3:  "ValidatorConfigContractType",
		4:  "FreezeContractType",
		5:  "UnfreezeContractType",
		6:  "DelegateContractType",
		7:  "UndelegateContractType",
		8:  "WithdrawContractType",
		9:  "ClaimContractType",
		10: "UnjailContractType",
		11: "AssetTriggerContractType",
		12: "SetAccountNameContractType",
		13: "ProposalContractType",
		14: "VoteContractType",
		15: "ConfigITOContractType",
		16: "SetITOPricesContractType",
		17: "BuyContractType",
		18: "SellContractType",
		19: "CancelMarketOrderContractType",
		20: "CreateMarketplaceContractType",
		21: "ConfigMarketplaceContractType",
		22: "UpdateAccountPermissionContractType",
		23: "DepositContractType",
		24: "ITOTriggerContractType",
		63: "SmartContractType",
	}
	TXContract_ContractType_value = map[string]int32{
		"TransferContractType":                0,
		"CreateAssetContractType":             1,
		"CreateValidatorContractType":         2,
		"ValidatorConfigContractType":         3,
		"FreezeContractType":                  4,
		"UnfreezeContractType":                5,
		"DelegateContractType":                6,
		"UndelegateContractType":              7,
		"WithdrawContractType":                8,
		"ClaimContractType":                   9,
		"UnjailContractType":                  10,
		"AssetTriggerContractType":            11,
		"SetAccountNameContractType":          12,
		"ProposalContractType":                13,
		"VoteContractType":                    14,
		"ConfigITOContractType":               15,
		"SetITOPricesContractType":            16,
		"BuyContractType":                     17,
		"SellContractType":                    18,
		"CancelMarketOrderContractType":       19,
		"CreateMarketplaceContractType":       20,
		"ConfigMarketplaceContractType":       21,
		"UpdateAccountPermissionContractType": 22,
		"DepositContractType":                 23,
		"ITOTriggerContractType":              24,
		"SmartContractType":                   63,
	}
)

func (x TXContract_ContractType) Enum() *TXContract_ContractType {
	p := new(TXContract_ContractType)
	*p = x
	return p
}

func (x TXContract_ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TXContract_ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[0].Descriptor()
}

func (TXContract_ContractType) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[0]
}

func (x TXContract_ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TXContract_ContractType.Descriptor instead.
func (TXContract_ContractType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0, 0}
}

type Transaction_TXResult int32

const (
	Transaction_SUCCESS Transaction_TXResult = 0
	Transaction_FAILED  Transaction_TXResult = 1
)

// Enum value maps for Transaction_TXResult.
var (
	Transaction_TXResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	Transaction_TXResult_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x Transaction_TXResult) Enum() *Transaction_TXResult {
	p := new(Transaction_TXResult)
	*p = x
	return p
}

func (x Transaction_TXResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_TXResult) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[1].Descriptor()
}

func (Transaction_TXResult) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[1]
}

func (x Transaction_TXResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_TXResult.Descriptor instead.
func (Transaction_TXResult) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1, 0}
}

type Transaction_TXResultCode int32

const (
	Transaction_Ok Transaction_TXResultCode = 0
	// OutOfFunds is returned when the caller (sender) runs out of funds.
	Transaction_OutOfFunds      Transaction_TXResultCode = 1
	Transaction_AccountError    Transaction_TXResultCode = 2
	Transaction_AssetError      Transaction_TXResultCode = 3
	Transaction_ContractInvalid Transaction_TXResultCode = 4
	// ContractNotFound is returned when the called contract does not exist.
	Transaction_ContractNotFound         Transaction_TXResultCode = 5
	Transaction_FeeInvalid               Transaction_TXResultCode = 6
	Transaction_ParameterInvalid         Transaction_TXResultCode = 7
	Transaction_APRInvalid               Transaction_TXResultCode = 8
	Transaction_AssetIDInvalid           Transaction_TXResultCode = 9
	Transaction_AssetTypeInvalid         Transaction_TXResultCode = 10
	Transaction_AssetCantBeMinted        Transaction_TXResultCode = 11
	Transaction_AssetCantBeBurned        Transaction_TXResultCode = 12
	Transaction_AssetCantBePaused        Transaction_TXResultCode = 13
	Transaction_AssetCantBeDelegated     Transaction_TXResultCode = 14
	Transaction_AssetOwnerCantBeChanged  Transaction_TXResultCode = 15
	Transaction_AccountNotOwner          Transaction_TXResultCode = 16
	Transaction_CommissionTooHigh        Transaction_TXResultCode = 17
	Transaction_DelegationAmountInvalid  Transaction_TXResultCode = 18
	Transaction_ProposalNotActive        Transaction_TXResultCode = 19
	Transaction_ValueInvalid             Transaction_TXResultCode = 20
	Transaction_AmountInvalid            Transaction_TXResultCode = 21
	Transaction_BucketIDInvalid          Transaction_TXResultCode = 22
	Transaction_KeyConflict              Transaction_TXResultCode = 23
	Transaction_MaxDelegationAmount      Transaction_TXResultCode = 24
	Transaction_InvalidPeerKey           Transaction_TXResultCode = 25
	Transaction_MinKFIStakedUnreached    Transaction_TXResultCode = 26
	Transaction_MaxSupplyExceeded        Transaction_TXResultCode = 27
	Transaction_SaveAccountError         Transaction_TXResultCode = 28
	Transaction_LoadAccountError         Transaction_TXResultCode = 29
	Transaction_SameAccountError         Transaction_TXResultCode = 30
	Transaction_AssetPaused              Transaction_TXResultCode = 31
	Transaction_DeletegateError          Transaction_TXResultCode = 32
	Transaction_WithdrawNotAvailable     Transaction_TXResultCode = 33
	Transaction_ErrOverflow              Transaction_TXResultCode = 34
	Transaction_SetStakingErr            Transaction_TXResultCode = 35
	Transaction_SetMarketOrderErr        Transaction_TXResultCode = 36
	Transaction_BalanceError             Transaction_TXResultCode = 37
	Transaction_KAPPError                Transaction_TXResultCode = 38
	Transaction_UnfreezeError            Transaction_TXResultCode = 39
	Transaction_UndelegateError          Transaction_TXResultCode = 40
	Transaction_WithdrawError            Transaction_TXResultCode = 41
	Transaction_ClaimError               Transaction_TXResultCode = 42
	Transaction_BucketsExceeded          Transaction_TXResultCode = 43
	Transaction_AssetCantBeWiped         Transaction_TXResultCode = 44
	Transaction_AssetCantAddRoles        Transaction_TXResultCode = 45
	Transaction_FreezeError              Transaction_TXResultCode = 46
	Transaction_ITONotActive             Transaction_TXResultCode = 47
	Transaction_NFTMintStopped           Transaction_TXResultCode = 48
	Transaction_RoyaltiesChangeStopped   Transaction_TXResultCode = 49
	Transaction_ITOKAPPError             Transaction_TXResultCode = 50
	Transaction_ITOWhiteListError        Transaction_TXResultCode = 51
	Transaction_NFTMetadataChangeStopped Transaction_TXResultCode = 52
	Transaction_AlreadyExists            Transaction_TXResultCode = 53
	Transaction_IteratorLimitReached     Transaction_TXResultCode = 54
	// FunctionNotFound is returned when the input specifies a function name that does not exist or is not public.
	Transaction_VMFunctionNotFound Transaction_TXResultCode = 55
	// FunctionWrongSignature is returned when the wrong number of arguments is provided.
	Transaction_VMFunctionWrongSignature Transaction_TXResultCode = 56
	// UserError is returned for various execution errors.
	Transaction_VMUserError Transaction_TXResultCode = 57
	// OutOfGas is returned when VM execution runs out of gas.
	Transaction_VMOutOfGas Transaction_TXResultCode = 58
	// AccountCollision is returned when created account already exists.
	Transaction_VMAccountCollision Transaction_TXResultCode = 59
	// CallStackOverFlow is returned when stack overflow occurs.
	Transaction_VMCallStackOverFlow Transaction_TXResultCode = 60
	// Execution Panicked
	Transaction_VMExecutionPanicked Transaction_TXResultCode = 61
	// ExecutionFailed is returned when the execution of the specified function has failed.
	Transaction_VMExecutionFailed Transaction_TXResultCode = 62
	// UpgradeFailed is returned when the upgrade of the contract has failed
	Transaction_VMUpgradeFailed Transaction_TXResultCode = 63
	// SimulateFailed is returned when tx simulation fails execution
	Transaction_VMSimulateFailed Transaction_TXResultCode = 64
	// KDA Transfer not allowed
	Transaction_KDATransferNotAllowed Transaction_TXResultCode = 65
	Transaction_Fail                  Transaction_TXResultCode = 99
)

// Enum value maps for Transaction_TXResultCode.
var (
	Transaction_TXResultCode_name = map[int32]string{
		0:  "Ok",
		1:  "OutOfFunds",
		2:  "AccountError",
		3:  "AssetError",
		4:  "ContractInvalid",
		5:  "ContractNotFound",
		6:  "FeeInvalid",
		7:  "ParameterInvalid",
		8:  "APRInvalid",
		9:  "AssetIDInvalid",
		10: "AssetTypeInvalid",
		11: "AssetCantBeMinted",
		12: "AssetCantBeBurned",
		13: "AssetCantBePaused",
		14: "AssetCantBeDelegated",
		15: "AssetOwnerCantBeChanged",
		16: "AccountNotOwner",
		17: "CommissionTooHigh",
		18: "DelegationAmountInvalid",
		19: "ProposalNotActive",
		20: "ValueInvalid",
		21: "AmountInvalid",
		22: "BucketIDInvalid",
		23: "KeyConflict",
		24: "MaxDelegationAmount",
		25: "InvalidPeerKey",
		26: "MinKFIStakedUnreached",
		27: "MaxSupplyExceeded",
		28: "SaveAccountError",
		29: "LoadAccountError",
		30: "SameAccountError",
		31: "AssetPaused",
		32: "DeletegateError",
		33: "WithdrawNotAvailable",
		34: "ErrOverflow",
		35: "SetStakingErr",
		36: "SetMarketOrderErr",
		37: "BalanceError",
		38: "KAPPError",
		39: "UnfreezeError",
		40: "UndelegateError",
		41: "WithdrawError",
		42: "ClaimError",
		43: "BucketsExceeded",
		44: "AssetCantBeWiped",
		45: "AssetCantAddRoles",
		46: "FreezeError",
		47: "ITONotActive",
		48: "NFTMintStopped",
		49: "RoyaltiesChangeStopped",
		50: "ITOKAPPError",
		51: "ITOWhiteListError",
		52: "NFTMetadataChangeStopped",
		53: "AlreadyExists",
		54: "IteratorLimitReached",
		55: "VMFunctionNotFound",
		56: "VMFunctionWrongSignature",
		57: "VMUserError",
		58: "VMOutOfGas",
		59: "VMAccountCollision",
		60: "VMCallStackOverFlow",
		61: "VMExecutionPanicked",
		62: "VMExecutionFailed",
		63: "VMUpgradeFailed",
		64: "VMSimulateFailed",
		65: "KDATransferNotAllowed",
		99: "Fail",
	}
	Transaction_TXResultCode_value = map[string]int32{
		"Ok":                       0,
		"OutOfFunds":               1,
		"AccountError":             2,
		"AssetError":               3,
		"ContractInvalid":          4,
		"ContractNotFound":         5,
		"FeeInvalid":               6,
		"ParameterInvalid":         7,
		"APRInvalid":               8,
		"AssetIDInvalid":           9,
		"AssetTypeInvalid":         10,
		"AssetCantBeMinted":        11,
		"AssetCantBeBurned":        12,
		"AssetCantBePaused":        13,
		"AssetCantBeDelegated":     14,
		"AssetOwnerCantBeChanged":  15,
		"AccountNotOwner":          16,
		"CommissionTooHigh":        17,
		"DelegationAmountInvalid":  18,
		"ProposalNotActive":        19,
		"ValueInvalid":             20,
		"AmountInvalid":            21,
		"BucketIDInvalid":          22,
		"KeyConflict":              23,
		"MaxDelegationAmount":      24,
		"InvalidPeerKey":           25,
		"MinKFIStakedUnreached":    26,
		"MaxSupplyExceeded":        27,
		"SaveAccountError":         28,
		"LoadAccountError":         29,
		"SameAccountError":         30,
		"AssetPaused":              31,
		"DeletegateError":          32,
		"WithdrawNotAvailable":     33,
		"ErrOverflow":              34,
		"SetStakingErr":            35,
		"SetMarketOrderErr":        36,
		"BalanceError":             37,
		"KAPPError":                38,
		"UnfreezeError":            39,
		"UndelegateError":          40,
		"WithdrawError":            41,
		"ClaimError":               42,
		"BucketsExceeded":          43,
		"AssetCantBeWiped":         44,
		"AssetCantAddRoles":        45,
		"FreezeError":              46,
		"ITONotActive":             47,
		"NFTMintStopped":           48,
		"RoyaltiesChangeStopped":   49,
		"ITOKAPPError":             50,
		"ITOWhiteListError":        51,
		"NFTMetadataChangeStopped": 52,
		"AlreadyExists":            53,
		"IteratorLimitReached":     54,
		"VMFunctionNotFound":       55,
		"VMFunctionWrongSignature": 56,
		"VMUserError":              57,
		"VMOutOfGas":               58,
		"VMAccountCollision":       59,
		"VMCallStackOverFlow":      60,
		"VMExecutionPanicked":      61,
		"VMExecutionFailed":        62,
		"VMUpgradeFailed":          63,
		"VMSimulateFailed":         64,
		"KDATransferNotAllowed":    65,
		"Fail":                     99,
	}
)

func (x Transaction_TXResultCode) Enum() *Transaction_TXResultCode {
	p := new(Transaction_TXResultCode)
	*p = x
	return p
}

func (x Transaction_TXResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_TXResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[2].Descriptor()
}

func (Transaction_TXResultCode) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[2]
}

func (x Transaction_TXResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_TXResultCode.Descriptor instead.
func (Transaction_TXResultCode) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1, 1}
}

// TXContract available
type TXContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      TXContract_ContractType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=proto.TXContract_ContractType" json:"Type,omitempty"`
	Parameter *anypb.Any              `protobuf:"bytes,2,opt,name=Parameter,json=parameter,proto3" json:"Parameter,omitempty"`
}

func (x *TXContract) Reset() {
	*x = TXContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXContract) ProtoMessage() {}

func (x *TXContract) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXContract.ProtoReflect.Descriptor instead.
func (*TXContract) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *TXContract) GetType() TXContract_ContractType {
	if x != nil {
		return x.Type
	}
	return TXContract_TransferContractType
}

func (x *TXContract) GetParameter() *anypb.Any {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Transaction holds all the data needed for a value transfer
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData       *Transaction_Raw         `protobuf:"bytes,1,opt,name=RawData,json=rawData,proto3" json:"RawData,omitempty"`
	Signature     [][]byte                 `protobuf:"bytes,2,rep,name=Signature,json=signature,omitempty,proto3" json:"Signature,omitempty"`
	Result        Transaction_TXResult     `protobuf:"varint,3,opt,name=Result,json=result,omitempty,proto3,enum=proto.Transaction_TXResult" json:"Result,omitempty"`
	ResultCode    Transaction_TXResultCode `protobuf:"varint,4,opt,name=ResultCode,json=resultCode,omitempty,proto3,enum=proto.Transaction_TXResultCode" json:"ResultCode,omitempty"`
	Receipts      []*Transaction_Receipt   `protobuf:"bytes,5,rep,name=Receipts,json=receipts,proto3" json:"Receipts,omitempty"`
	Block         uint64                   `protobuf:"varint,6,opt,name=Block,json=block,proto3" json:"Block,omitempty"`
	GasLimit      uint64                   `protobuf:"varint,7,opt,name=GasLimit,json=gasLimit,proto3" json:"GasLimit,omitempty"`
	GasMultiplier uint64                   `protobuf:"varint,8,opt,name=GasMultiplier,json=gasMultiplier,proto3" json:"GasMultiplier,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetRawData() *Transaction_Raw {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *Transaction) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetResult() Transaction_TXResult {
	if x != nil {
		return x.Result
	}
	return Transaction_SUCCESS
}

func (x *Transaction) GetResultCode() Transaction_TXResultCode {
	if x != nil {
		return x.ResultCode
	}
	return Transaction_Ok
}

func (x *Transaction) GetReceipts() []*Transaction_Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *Transaction) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Transaction) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Transaction) GetGasMultiplier() uint64 {
	if x != nil {
		return x.GasMultiplier
	}
	return 0
}

type Transaction_KDAFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KDA    []byte `protobuf:"bytes,1,opt,name=KDA,json=kda,proto3" json:"KDA,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"` // TODO: allow spread
}

func (x *Transaction_KDAFee) Reset() {
	*x = Transaction_KDAFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_KDAFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_KDAFee) ProtoMessage() {}

func (x *Transaction_KDAFee) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_KDAFee.ProtoReflect.Descriptor instead.
func (*Transaction_KDAFee) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Transaction_KDAFee) GetKDA() []byte {
	if x != nil {
		return x.KDA
	}
	return nil
}

func (x *Transaction_KDAFee) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type Transaction_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce        uint64              `protobuf:"varint,1,opt,name=Nonce,json=nonce,proto3" json:"Nonce,omitempty"`
	Sender       []byte              `protobuf:"bytes,2,opt,name=Sender,json=sender,proto3" json:"Sender,omitempty"`
	Contract     []*TXContract       `protobuf:"bytes,6,rep,name=Contract,json=contract,proto3" json:"Contract,omitempty"`
	PermissionID int32               `protobuf:"varint,7,opt,name=PermissionID,json=permissionID,omitempty,proto3" json:"PermissionID,omitempty"`
	Data         [][]byte            `protobuf:"bytes,10,rep,name=Data,json=data,omitempty,proto3" json:"Data,omitempty"`
	KAppFee      int64               `protobuf:"varint,13,opt,name=KAppFee,json=kAppFee,proto3" json:"KAppFee,omitempty"`
	BandwidthFee int64               `protobuf:"varint,14,opt,name=BandwidthFee,json=bandwidthFee,proto3" json:"BandwidthFee,omitempty"`
	Version      uint32              `protobuf:"varint,15,opt,name=Version,json=version,omitempty,proto3" json:"Version,omitempty"`
	ChainID      []byte              `protobuf:"bytes,16,opt,name=ChainID,json=chainID,omitempty,proto3" json:"ChainID,omitempty"`
	KDAFee       *Transaction_KDAFee `protobuf:"bytes,17,opt,name=KDAFee,json=kdaFee,proto3" json:"KDAFee,omitempty"`
}

func (x *Transaction_Raw) Reset() {
	*x = Transaction_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Raw) ProtoMessage() {}

func (x *Transaction_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Raw.ProtoReflect.Descriptor instead.
func (*Transaction_Raw) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Transaction_Raw) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction_Raw) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_Raw) GetContract() []*TXContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Transaction_Raw) GetPermissionID() int32 {
	if x != nil {
		return x.PermissionID
	}
	return 0
}

func (x *Transaction_Raw) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Transaction_Raw) GetKAppFee() int64 {
	if x != nil {
		return x.KAppFee
	}
	return 0
}

func (x *Transaction_Raw) GetBandwidthFee() int64 {
	if x != nil {
		return x.BandwidthFee
	}
	return 0
}

func (x *Transaction_Raw) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction_Raw) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Transaction_Raw) GetKDAFee() *Transaction_KDAFee {
	if x != nil {
		return x.KDAFee
	}
	return nil
}

type Transaction_Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (x *Transaction_Receipt) Reset() {
	*x = Transaction_Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Receipt) ProtoMessage() {}

func (x *Transaction_Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Receipt.ProtoReflect.Descriptor instead.
func (*Transaction_Receipt) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Transaction_Receipt) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x06, 0x0a, 0x0a, 0x54, 0x58, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x58, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xe8, 0x05, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0d, 0x12,
	0x14, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x54, 0x4f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0f,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x49, 0x54, 0x4f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x10, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x14, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x15, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x4f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x3f, 0x22, 0xf9, 0x11, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x77,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x61, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x67, 0x61,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x32, 0x0a, 0x06, 0x4b,
	0x44, 0x41, 0x46, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x44, 0x41, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x64, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0xe7, 0x02, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x58, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x4b, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6b, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x46, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x4b, 0x44, 0x41, 0x46, 0x65, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x44, 0x41, 0x46, 0x65,
	0x65, 0x52, 0x06, 0x6b, 0x64, 0x61, 0x46, 0x65, 0x65, 0x1a, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x08, 0x54, 0x58, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x93, 0x0b,
	0x0a, 0x0c, 0x54, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x52,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x74,
	0x42, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10,
	0x0c, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x74, 0x42, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x0f, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x13, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x14, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x4b, 0x46,
	0x49, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x1c, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x20, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x10, 0x23, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x10, 0x24, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x41, 0x50, 0x50,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x28, 0x12,
	0x11, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x29, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x2b, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x74, 0x42, 0x65, 0x57, 0x69, 0x70, 0x65, 0x64, 0x10, 0x2c, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x10, 0x2d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x4f, 0x4e, 0x6f, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x2f, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x46, 0x54, 0x4d, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x31, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x4f, 0x4b, 0x41,
	0x50, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x4f,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x33,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x34, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10,
	0x35, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x36, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x4d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x37, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x38, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x39, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73,
	0x10, 0x3a, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x3b, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x3d, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x4d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x3f, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4d, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x40, 0x12, 0x19,
	0x0a, 0x15, 0x4b, 0x44, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x41, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x63, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_transaction_proto_goTypes = []interface{}{
	(TXContract_ContractType)(0),  // 0: proto.TXContract.ContractType
	(Transaction_TXResult)(0),     // 1: proto.Transaction.TXResult
	(Transaction_TXResultCode)(0), // 2: proto.Transaction.TXResultCode
	(*TXContract)(nil),            // 3: proto.TXContract
	(*Transaction)(nil),           // 4: proto.Transaction
	(*Transaction_KDAFee)(nil),    // 5: proto.Transaction.KDAFee
	(*Transaction_Raw)(nil),       // 6: proto.Transaction.Raw
	(*Transaction_Receipt)(nil),   // 7: proto.Transaction.Receipt
	(*anypb.Any)(nil),             // 8: google.protobuf.Any
}
var file_transaction_proto_depIdxs = []int32{
	0, // 0: proto.TXContract.Type:type_name -> proto.TXContract.ContractType
	8, // 1: proto.TXContract.Parameter:type_name -> google.protobuf.Any
	6, // 2: proto.Transaction.RawData:type_name -> proto.Transaction.Raw
	1, // 3: proto.Transaction.Result:type_name -> proto.Transaction.TXResult
	2, // 4: proto.Transaction.ResultCode:type_name -> proto.Transaction.TXResultCode
	7, // 5: proto.Transaction.Receipts:type_name -> proto.Transaction.Receipt
	3, // 6: proto.Transaction.Raw.Contract:type_name -> proto.TXContract
	5, // 7: proto.Transaction.Raw.KDAFee:type_name -> proto.Transaction.KDAFee
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_KDAFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		EnumInfos:         file_transaction_proto_enumTypes,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}
